version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0

parameters:

  ENV_NAME:
    type: string
    default: "capstone-project"
  KEY_PAIR:
    type: string
    default: "capstone"


jobs:
  make-lint:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      
      - run:
          name: Setting Up Virtual Environment
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      
      - run:
          name: Installing hadolint, Pylint & Upgrading Pip
          command: |  
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && chmod +x /bin/hadolint
            pip install pylint
            pip install --upgrade pip
      
      - run:
          name: run lint 
          command: |
            . venv/bin/activate
            make lint 
      
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          
  
  docker-upload:
    docker:
      - image: python:3.7.3-stretch
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
          
    working_directory: ~/repo
    
    steps:
      - checkout
      
      - setup_remote_docker:
          version: 19.03.13
      
      - run:
          name: containter version checkout
          command: |
            docker image ls
            docker ps -a
        
      - run:
          name: build docker containter
          command: |
            echo "--- Building Blue Deployment ---"
            docker build -t jralawrence/udacity-capstone-blue-deployment
            docker image ls
        
      - run:
          name: testing docker container 
          command: |
              docker run -d --rm --name testapp -p 8081:8080 jralawrence/udacity-capstone-blue-deployment
              sleep 5
              docker container ls
              docker stop testapp
      
      - run:
          name: uploading docker container
          command: |
            docker login -u = "$DOCKERHUB_USERNAME" -p = "$DOCKERHUB_PASSWORD"
            docker push jralawrence/udacity-capstone-blue-deployment
 
  infrastructure-creation:
    executor: aws-eks/python3
    Parameters:
      cluster-name:
        description: EKS cluster name
        type: string

    steps:
      - checkout
      
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
          
      - run:
          name: eksctl tool installation
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      
      - aws-eks_create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  infrastructure-deletion:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: EKS cluster name
        type: string

    steps:
      - checkout
      
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      
      - run:
          name: eksctl tool installation
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      
      - aws-eks/delete-cluster:
          cluster-name: << parameters.cluster-name >>   
          
  cluster-check:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: EKS cluster name
        type: string
    
    steps:
      - kubernetes/install
      
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      
      - run:
          name: Kube cluster
          command: |
            kubectl get services
            
            
  code-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: EKS cluster name
        type: string

    steps:
      - checkout
      
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstone-project-deployment            

  deployment-test:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: EKS cluster name
        type: string
    
    steps:
      - kubernetes/install
      
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      
      - run:
          name: Kube cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
            







workflows:
  default:
    jobs:
      - make-lint
      - docker-upload:
          requires: [make-lint]
      - infrastructure-creation:
          cluster-name: capstone-project
          requires: [docker-upload]
      - check-cluster:
          cluster-name: capstone-test2211-cluster
      - delete-infrastructure:
          cluster-name: capstone-test2211-cluster    
          requires: [check-cluster]
      - deploy-code:
          cluster-name: capstone-project
          requires: [check-cluster]
      - test-deployment:
          cluster-name: capstone-project
          requires: [deploy-code]
      - aws-eks/update-container-image:
          cluster-name: capstone-project
          container-image-updates: 'capstone-project-deployment=jacklawrencetui/capstone-project'
          get-rollout-status: true
          requires: [test-deployment]
          resource-name: deployment/capstone-project-deployment                  
      - aws-eks/delete-cluster:
          cluster-name: capstone-project